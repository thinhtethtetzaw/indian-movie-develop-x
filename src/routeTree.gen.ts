/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SearchRouteImport } from './routes/search'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SettingsIndexRouteImport } from './routes/settings/index'
import { Route as HomeIndexRouteImport } from './routes/home/index'
import { Route as BookmarkIndexRouteImport } from './routes/bookmark/index'
import { Route as SettingsNotificationsRouteImport } from './routes/settings/notifications'
import { Route as SeriesSeriesIdRouteImport } from './routes/series/$seriesId'
import { Route as MoviesMovieIdRouteImport } from './routes/movies/$movieId'

const SearchRoute = SearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsIndexRoute = SettingsIndexRouteImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => rootRouteImport,
} as any)
const HomeIndexRoute = HomeIndexRouteImport.update({
  id: '/home/',
  path: '/home/',
  getParentRoute: () => rootRouteImport,
} as any)
const BookmarkIndexRoute = BookmarkIndexRouteImport.update({
  id: '/bookmark/',
  path: '/bookmark/',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsNotificationsRoute = SettingsNotificationsRouteImport.update({
  id: '/settings/notifications',
  path: '/settings/notifications',
  getParentRoute: () => rootRouteImport,
} as any)
const SeriesSeriesIdRoute = SeriesSeriesIdRouteImport.update({
  id: '/series/$seriesId',
  path: '/series/$seriesId',
  getParentRoute: () => rootRouteImport,
} as any)
const MoviesMovieIdRoute = MoviesMovieIdRouteImport.update({
  id: '/movies/$movieId',
  path: '/movies/$movieId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/search': typeof SearchRoute
  '/movies/$movieId': typeof MoviesMovieIdRoute
  '/series/$seriesId': typeof SeriesSeriesIdRoute
  '/settings/notifications': typeof SettingsNotificationsRoute
  '/bookmark': typeof BookmarkIndexRoute
  '/home': typeof HomeIndexRoute
  '/settings': typeof SettingsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/search': typeof SearchRoute
  '/movies/$movieId': typeof MoviesMovieIdRoute
  '/series/$seriesId': typeof SeriesSeriesIdRoute
  '/settings/notifications': typeof SettingsNotificationsRoute
  '/bookmark': typeof BookmarkIndexRoute
  '/home': typeof HomeIndexRoute
  '/settings': typeof SettingsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/search': typeof SearchRoute
  '/movies/$movieId': typeof MoviesMovieIdRoute
  '/series/$seriesId': typeof SeriesSeriesIdRoute
  '/settings/notifications': typeof SettingsNotificationsRoute
  '/bookmark/': typeof BookmarkIndexRoute
  '/home/': typeof HomeIndexRoute
  '/settings/': typeof SettingsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/search'
    | '/movies/$movieId'
    | '/series/$seriesId'
    | '/settings/notifications'
    | '/bookmark'
    | '/home'
    | '/settings'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/search'
    | '/movies/$movieId'
    | '/series/$seriesId'
    | '/settings/notifications'
    | '/bookmark'
    | '/home'
    | '/settings'
  id:
    | '__root__'
    | '/'
    | '/search'
    | '/movies/$movieId'
    | '/series/$seriesId'
    | '/settings/notifications'
    | '/bookmark/'
    | '/home/'
    | '/settings/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SearchRoute: typeof SearchRoute
  MoviesMovieIdRoute: typeof MoviesMovieIdRoute
  SeriesSeriesIdRoute: typeof SeriesSeriesIdRoute
  SettingsNotificationsRoute: typeof SettingsNotificationsRoute
  BookmarkIndexRoute: typeof BookmarkIndexRoute
  HomeIndexRoute: typeof HomeIndexRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/': {
      id: '/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/home/': {
      id: '/home/'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/bookmark/': {
      id: '/bookmark/'
      path: '/bookmark'
      fullPath: '/bookmark'
      preLoaderRoute: typeof BookmarkIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/notifications': {
      id: '/settings/notifications'
      path: '/settings/notifications'
      fullPath: '/settings/notifications'
      preLoaderRoute: typeof SettingsNotificationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/series/$seriesId': {
      id: '/series/$seriesId'
      path: '/series/$seriesId'
      fullPath: '/series/$seriesId'
      preLoaderRoute: typeof SeriesSeriesIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/movies/$movieId': {
      id: '/movies/$movieId'
      path: '/movies/$movieId'
      fullPath: '/movies/$movieId'
      preLoaderRoute: typeof MoviesMovieIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SearchRoute: SearchRoute,
  MoviesMovieIdRoute: MoviesMovieIdRoute,
  SeriesSeriesIdRoute: SeriesSeriesIdRoute,
  SettingsNotificationsRoute: SettingsNotificationsRoute,
  BookmarkIndexRoute: BookmarkIndexRoute,
  HomeIndexRoute: HomeIndexRoute,
  SettingsIndexRoute: SettingsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
