/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/v1/home/recommend/list": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get recommended home list */
    get: operations["9e166e127a0ca3ec2d76102813629dff"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/video/detail": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get video detail by vod_id */
    get: operations["91ce612d7b9b32feb799b233d2cd891f"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/video/recommend": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get recommended videos based on vod_id */
    get: operations["35573ee310642d46d83e4c991e77f2db"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/video/list-by-ids": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Get videos by multiple IDs */
    post: operations["bd5c37c490c8ae400a01bdf3f35fd814"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/video/topic/{navigatorId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get videos by topic level using navigator ID */
    get: operations["28c45982fa08f66ddaffb255a19e7040"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/type/list": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get list of types for a video */
    get: operations["a92d49f1475c4a465ce2884bcd8e416c"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/videos/search/suggestions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get search suggestions for videos */
    get: operations["8a33cd74ccf35a01d87bf9164735c2c6"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/videos/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Search videos with pagination */
    get: operations["fd98c593e0e6e771e36285f4a9dea36e"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /**
     * Video Model
     * @description Video information model
     */
    Video: {
      /**
       * @description Unique video identifier
       * @example MS1xx411c7Xq
       */
      vod_id?: string;
      /**
       * @description Video title
       * @example Road House
       */
      vod_name?: string;
      /**
       * @description Video title in English
       * @example Road House
       */
      vod_en?: string;
      /**
       * @description Video subtitle
       * @example Road House
       */
      vod_sub?: string;
      /**
       * @description Type ID
       * @example 1
       */
      type_id?: number;
      /**
       * @description Video categories
       * @example Action,Thriller,Movies
       */
      vod_class?: string;
      /**
       * @description Video actors
       * @example Sample Actor 1,Sample Actor 2
       */
      vod_actor?: string;
      /**
       * @description Video director
       * @example Doug Liman
       */
      vod_director?: string;
      /**
       * @description Video description
       * @example Ex-UFC fighter Dalton takes a job at a Florida Keys roadhouse.
       */
      vod_blurb?: string;
      /**
       * @description Video production country
       * @example United States
       */
      vod_area?: string;
      /**
       * @description Video language
       * @example English
       */
      vod_lang?: string;
      /**
       * @description Video release year
       * @example 2024
       */
      vod_year?: string;
      /**
       * @description Video timestamp
       * @example 1752742999
       */
      vod_time?: number;
      /**
       * @description Detailed video content
       * @example Video description content here.
       */
      vod_content?: string;
      /**
       * @description Video rating score
       * @example 3.0
       */
      vod_score?: string;
      /**
       * @description Video poster image
       * @example https://via.placeholder.com/380x562.png
       */
      vod_pic?: string;
      /**
       * @description Video quality remarks
       * @example 1080p
       */
      vod_remarks?: string;
      /** @description Video play URLs */
      vod_play_url?: {
        /** @example  */
        NO1?: string;
      }[];
    };
    /**
     * Video List Response
     * @description Response model for video list endpoints
     */
    VideoList: {
      /**
       * @description Response status
       * @example true
       */
      status?: boolean;
      /**
       * @description Response message
       * @example Success
       */
      message?: string;
      /** @description List of videos */
      data?: components["schemas"]["Video"][];
    };
    /**
     * Video Detail Response
     * @description Response model for video detail endpoint
     */
    VideoDetail: {
      /**
       * @description Response status
       * @example true
       */
      status?: boolean;
      /**
       * @description Response message
       * @example Success
       */
      message?: string;
      data?: components["schemas"]["Video"];
    };
    /**
     * Type Model
     * @description Video type/category model
     */
    Type: {
      /**
       * @description Unique type identifier
       * @example 1
       */
      type_id?: number;
      /**
       * @description Type name
       * @example Action
       */
      type_name?: string;
      /**
       * @description Type name in English
       * @example Action
       */
      type_en?: string;
      /**
       * @description Type icon image
       * @example https://via.placeholder.com/150x150.png
       */
      type_pic?: string;
      /**
       * @description Additional type information
       * @example
       */
      type_extend?: string;
    };
    /**
     * Type List Response
     * @description Response model for type list endpoint
     */
    TypeList: {
      /**
       * @description Response status
       * @example true
       */
      status?: boolean;
      /**
       * @description Response message
       * @example Success
       */
      message?: string;
      /** @description List of types */
      data?: components["schemas"]["Type"][];
    };
    /**
     * Search Suggestion Model
     * @description Search suggestion model
     */
    SearchSuggestion: {
      /**
       * @description Search suggestion type
       * @example video_name
       */
      type?: string;
      /**
       * @description Search suggestion text
       * @example Spider-Man: Far from Home
       */
      text?: string;
      /**
       * @description Associated video ID
       * @example 777
       */
      id?: number;
      /**
       * @description Search suggestion category
       * @example Video Title
       */
      category?: string;
      /**
       * @description Legacy search suggestion text
       * @example Action Movie
       */
      suggestion?: string;
      /**
       * @description Legacy associated video ID
       * @example MS1xx411c7Xq
       */
      vod_id?: string;
    };
    /**
     * Search Suggestion List Response
     * @description Response model for search suggestions endpoint
     */
    SearchSuggestionList: {
      /**
       * @description Response status
       * @example true
       */
      status?: boolean;
      /**
       * @description Response message
       * @example Success
       */
      message?: string;
      /** @description List of search suggestions */
      data?: components["schemas"]["SearchSuggestion"][];
    };
    /**
     * Search Result Response
     * @description Response model for search endpoint with pagination
     */
    SearchResult: {
      /**
       * @description Response status
       * @example true
       */
      status?: boolean;
      /**
       * @description Response message
       * @example Success
       */
      message?: string;
      data?: {
        /**
         * @description Current page number
         * @example 1
         */
        current_page?: number;
        /**
         * @description Items per page
         * @example 10
         */
        per_page?: number;
        /**
         * @description Total number of items
         * @example 100
         */
        total?: number;
        /** @description List of videos */
        videos?: components["schemas"]["Video"][];
      };
    };
    /**
     * Carousel Item Model
     * @description Carousel item model for home page
     */
    CarouselItem: {
      /**
       * @description Item type
       * @example carousel
       */
      type?: string;
      /**
       * @description Section title
       * @example Carousel
       */
      title?: string;
      /** @description List of videos in carousel */
      list?: components["schemas"]["Video"][];
    };
    /**
     * Home Recommend Response
     * @description Response model for home recommend endpoint
     */
    HomeRecommendResponse: {
      /**
       * @description Response status
       * @example true
       */
      status?: boolean;
      /**
       * @description Response message
       * @example Success
       */
      message?: string;
      /** @description List of carousel items */
      data?: components["schemas"]["CarouselItem"][];
    };
    /**
     * Video IDs Request
     * @description Request model for getting videos by IDs
     */
    VideoIdsRequest: {
      /**
       * @description Array of video IDs
       * @example [
       *       "MS1xx411c7Xq",
       *       "MS1xx411c7Xy"
       *     ]
       */
      video_ids?: string[];
    };
    /**
     * Error Response
     * @description Standard error response model
     */
    ErrorResponse: {
      /**
       * @description Response status
       * @example false
       */
      status?: boolean;
      /**
       * @description Error description
       * @example Error message
       */
      message?: string;
      /** @description Validation errors if any */
      errors?: Record<string, never>;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  "9e166e127a0ca3ec2d76102813629dff": {
    parameters: {
      query?: never;
      header: {
        /** @description Language code (en, cn, tw, ko, ja) */
        "Accept-Language": string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HomeRecommendResponse"];
        };
      };
    };
  };
  "91ce612d7b9b32feb799b233d2cd891f": {
    parameters: {
      query: {
        /** @description Video ID */
        vod_id: string;
      };
      header: {
        /** @description Language code (en, cn, tw, ko, ja) */
        "Accept-Language": string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["VideoDetail"];
        };
      };
    };
  };
  "35573ee310642d46d83e4c991e77f2db": {
    parameters: {
      query: {
        /** @description Video ID to get recommendations for */
        vod_id: string;
      };
      header: {
        /** @description Language code (en, cn, tw, ko, ja) */
        "Accept-Language": string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["VideoList"];
        };
      };
    };
  };
  bd5c37c490c8ae400a01bdf3f35fd814: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["VideoIdsRequest"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["VideoList"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "28c45982fa08f66ddaffb255a19e7040": {
    parameters: {
      query?: {
        /** @description Page number for pagination */
        page?: number;
      };
      header: {
        /** @description Language code (en, cn, tw, ko, ja) */
        "Accept-Language": string;
      };
      path: {
        /** @description Navigator ID from home page (e.g., k5, mO) */
        navigatorId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful response with paginated videos */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example true */
            status?: boolean;
            /** @example Success */
            message?: string;
            data?: {
              data?: components["schemas"]["Video"][];
              /** @example 1 */
              current_page?: number;
              /** @example 20 */
              per_page?: number;
              /** @example 100 */
              total?: number;
              /** @example 5 */
              last_page?: number;
            };
          };
        };
      };
      /** @description Navigator ID not found or invalid */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  a92d49f1475c4a465ce2884bcd8e416c: {
    parameters: {
      query: {
        /** @description Video ID to get types for */
        vod_id: string;
      };
      header: {
        /** @description Language code (en, cn, tw, ko, ja) */
        "Accept-Language": string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TypeList"];
        };
      };
    };
  };
  "8a33cd74ccf35a01d87bf9164735c2c6": {
    parameters: {
      query: {
        /** @description Search query string */
        q: string;
        /** @description Maximum number of suggestions to return */
        limit?: number;
      };
      header: {
        /** @description Language code (en, cn, tw, ko, ja) */
        "Accept-Language": string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SearchSuggestionList"];
        };
      };
    };
  };
  fd98c593e0e6e771e36285f4a9dea36e: {
    parameters: {
      query: {
        /** @description Search query string */
        q: string;
        /** @description Number of results per page */
        per_page?: number;
        /** @description Page number */
        page?: number;
        /** @description Filter by type ID */
        type_id?: number;
      };
      header: {
        /** @description Language code (en, cn, tw, ko, ja) */
        "Accept-Language": string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SearchResult"];
        };
      };
    };
  };
}
